name: Release Binaries

on:
  push:
    tags:
      - "v*.*.*"

permissions:
  contents: write  # Required to create a GitHub Release

jobs:
  build-macos:
    name: Build macOS Binaries
    runs-on: macos-latest
    strategy:
      matrix:
        target: [aarch64-apple-darwin, x86_64-apple-darwin]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Add target
        run: rustup target add ${{ matrix.target }}

      - name: Build binary
        run: cargo build --release --target ${{ matrix.target }}

      - name: Rename and compress binary
        run: |
          mkdir -p bin
          cp target/${{ matrix.target }}/release/tempesta bin/tempesta
          tar -czvf bin/tempesta-${{ matrix.target }}.tar.gz -C bin tempesta

      - name: Upload binary as artifact
        uses: actions/upload-artifact@v4
        with:
          name: tempesta-${{ matrix.target }}
          path: bin/tempesta-${{ matrix.target }}.tar.gz

  build-linux:
    name: Build Arch Linux Packages
    runs-on: ubuntu-latest
    strategy:
      matrix:
        target: [x86_64-unknown-linux-gnu, aarch64-unknown-linux-gnu]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Install cross
        run: cargo install cross

      - name: Add target
        run: rustup target add ${{ matrix.target }}

      - name: Build binary with cross
        run: cross build --release --target ${{ matrix.target }}

      - name: Rename and compress binary
        run: |
          mkdir -p bin
          cp target/${{ matrix.target }}/release/tempesta bin/tempesta
          tar -czvf bin/tempesta-${{ matrix.target }}.tar.gz -C bin tempesta

      - name: Upload binary as artifact
        uses: actions/upload-artifact@v4
        with:
          name: tempesta-${{ matrix.target }}
          path: bin/tempesta-${{ matrix.target }}.tar.gz

  release:
    name: Create GitHub Release
    needs: [build-macos, build-linux]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download macOS artifacts (aarch64)
        uses: actions/download-artifact@v4
        with:
          name: tempesta-aarch64-apple-darwin
          path: bin

      - name: Download macOS artifacts (x86_64)
        uses: actions/download-artifact@v4
        with:
          name: tempesta-x86_64-apple-darwin
          path: bin

      - name: Download Linux artifacts (x86_64)
        uses: actions/download-artifact@v4
        with:
          name: tempesta-x86_64-unknown-linux-gnu
          path: bin

      - name: Download Linux artifacts (aarch64)
        uses: actions/download-artifact@v4
        with:
          name: tempesta-aarch64-unknown-linux-gnu
          path: bin

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          files: bin/**
          token: ${{ secrets.GITHUB_TOKEN }}
          draft: false
          prerelease: false

      - name: Trigger Homebrew Tap Update
        run: |
          curl -X POST -H "Accept: application/vnd.github.v3+json" \
               -H "Authorization: token ${{ secrets.HOMEBREW_PAT }}" \
               https://api.github.com/repos/x71c9/homebrew-x71c9/dispatches \
               -d '{"event_type": "update-homebrew", "client_payload": {"tag": "${{ github.ref_name }}"}}'

  update-aur:
    name: Update AUR
    needs: release
    runs-on: ubuntu-latest
    container:
      image: archlinux:latest
    steps:
      - name: Install dependencies
        run: |
          pacman -Syu --noconfirm base-devel git openssh sudo

      - name: Setup SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.AUR_SECRET_KEY }}" > ~/.ssh/id_ed25519
          chmod 600 ~/.ssh/id_ed25519
          ssh-keyscan -t rsa,ecdsa,ed25519 aur.archlinux.org >> ~/.ssh/known_hosts

      - name: Checkout AUR Repository
        run: |
          GIT_SSH_COMMAND="ssh -i ~/.ssh/id_ed25519 -o IdentitiesOnly=yes -o StrictHostKeyChecking=no" \
            git clone ssh://aur@aur.archlinux.org/tempesta.git aur-tempesta

      - name: Create non-root build user
        run: |
          useradd -m builduser
          echo "builduser ALL=(ALL) NOPASSWD:ALL" >> /etc/sudoers
          chown -R builduser:builduser aur-tempesta
          mkdir -p /home/builduser/.ssh
          cp ~/.ssh/id_ed25519 /home/builduser/.ssh/id_ed25519
          chown -R builduser:builduser /home/builduser/.ssh
          chmod 600 /home/builduser/.ssh/id_ed25519

      - name: Update PKGBUILD and Push to AUR
        run: |
          sudo -E -H -u builduser bash <<'SCRIPT'
          cd aur-tempesta
          version=${GITHUB_REF_NAME#v}
          cat > PKGBUILD <<EOF
          pkgname=tempesta
          pkgver=${version}
          pkgrel=1
          pkgdesc="The fastest and lightest bookmark manager CLI written in Rust"
          arch=('x86_64' 'aarch64')
          url="https://github.com/x71c9/tempesta"
          license=('MIT')
          depends=('glibc')

          case "\$arch" in
            "x86_64")
              source=("https://github.com/x71c9/tempesta/releases/download/v${version}/tempesta-x86_64-unknown-linux-gnu.tar.gz")
              sha256sums=('SKIP')
              ;;
            "aarch64")
              source=("https://github.com/x71c9/tempesta/releases/download/v${version}/tempesta-aarch64-unknown-linux-gnu.tar.gz")
              sha256sums=('SKIP')
              ;;
            *)
              echo "Error: Unsupported architecture \$arch. Please open a github issue if you want to support it: https://github.com/x71c9/tempesta/issues" >&2
              exit 1
              ;;
          esac

          package() {
            install -Dm755 "\${srcdir}/tempesta" "\${pkgdir}/usr/bin/tempesta"
          }
          EOF
          makepkg --printsrcinfo > .SRCINFO
          git config user.email "mail@x71c9.com"
          git config user.name "x71c9"
          git add .
          git commit -m "chore(release): release ${version}"
          GIT_SSH_COMMAND="ssh -i ~/.ssh/id_ed25519 -o IdentitiesOnly=yes -o StrictHostKeyChecking=no" git push origin master
          SCRIPT
